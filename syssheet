#!/bin/sh
# System Sheet Script 1.2.4, Copyright (c) 2012-2020 Ma_Sys.ma
# For further info send an e-mail to Ma_Sys.ma@web.de.

if [ "$1" = "--help" ]
then
	echo "Usage $0 [--help]"
	echo "Usage $0 [-g|-c|-f]"
	echo
	echo "-g    Nice line characters only."
	echo "-c    Colors only, no line drawing characters."
	echo "-f    Full: lines and colors."
	exit 1
elif [ "$1" != "-s" ]; then
	# Buffer output (prefix newline => do not interfere with user input)
	exec printf "\n%s\n" "$("$0" -s "$@")"
else
	shift
fi

#-----------------------------------------------------[ Graphical Characters ]--

d_line=-
d_flin=-
d_etopl=+
d_etopr=+
d_ebotl=+
d_ebotr=+
d_conn_l=+
d_conn_r=+
d_pre=" "
d_post=" "
d_enc="|"
if [ "$1" = "-f" -o "$1" = "-g" ]; then
	# Causes problems on full-screen terminals
	# d_line=┈
	d_line=─
	d_flin=─
	d_etopl=┌
	d_etopr=┐
	d_ebotl=└
	d_ebotr=┘
	d_conn_l=├
	d_conn_r=┤
	d_enc=│
fi

#-------------------------------------------------------------------[ Colors ]--

d_r=""
d_borders=""
d_c=""
d_chl=""
d_spc=""
if [ "$1" = "-f" -o "$1" = "-c" ]; then
	d_r="\033[0m"
	d_borders="\033[34;40;9m"
	d_enc=$d_borders$d_enc$d_r
	d_pre="$d_pre\033[36;40;9m"
	d_post="$d_r$d_post"
	d_c="\033[30;40;1m"
	d_chl="\033[37;40;1m"
	d_spc="\033[32;40;9m"
fi

#---------------------------------------------------[ Identify terminal size ]--

rows=25
cols=80
[ -z $COLUMNS ] || cols=$COLUMNS
[ -z $LINES ]   || rows=$LINES

#---------------------------------------------------------[ Helper Functions ]--

ma_title() {
	strlen=$(($(echo "$1" | wc -m) + 2))
	pre=$((($cols - $strlen) / 2))
	i=1
	printf "$d_borders"
	while [ $i -lt $pre ]; do
		printf "$2"
		i=$(($i + 1))
	done
	printf "$d_r$3$1$4$d_borders"
	i=$(($i + $strlen))
	while [ $i -lt $cols ]; do
		printf "$2"
		i=$(($i + 1))
	done
	printf "$d_r"
}

ma_midtitle() {
	printf "$d_borders$d_conn_l$d_r"
	ma_title "$1" "$d_line" "$d_pre" "$d_post"
	printf "$d_borders$d_conn_r$d_r\n"
}

# $1 left
# $2 right
# [$3 left hl]
# [$4 right hl]
ma_info() {
	printf "$d_enc $d_c$3%s$d_c$4%$(($cols - $(echo "$1" | \
					wc -m) - 3))s$d_r $d_enc\n" "$1" "$2"
}

#----------------------------------------------------------[ General Section ]--

printf "$d_borders$d_etopl$d_r"
ma_title "$(head -n 2 "$0" | tail -n 1 | cut -c 3-)" "$d_flin" " $d_spc" "$d_r "
printf "$d_borders$d_etopr$d_r\n"

ma_info "$LOGNAME (id $(id -u)) on $TERM" \
		"$(grep -E "^(PRETTY_NAME)=" /etc/os-release | cut -d"\"" -f 2)"
ma_info "$(uname -s) $(uname -r)" "$(uname -m)"
ma_info "$(date '+%d.%m.%Y %H:%M:%S')" "$(uname -n)"

#-------------------------------------------------------------------[ System ]--

memtota="$(echo $(grep -E "^MemTotal:"     < /proc/meminfo) | cut -d" "  -f 2)"
memavai="$(echo $(grep -E "^MemAvailable:" < /proc/meminfo) | cut -d" "  -f 2)"
memused="$((memtota - memavai))"
memhl=
[ "$((memused * 100 / memtota))" -le 80 ] || memhl="$d_chl"

ma_info "$(uptime | sed -e 's/^.* up/up/g' -e 's/load average/load avg/g')" \
		"$((memused / 1024))/$((memtota / 1024)) MiB" "" "$memhl"

grep -E '^model name\s:' /proc/cpuinfo | cut -f2 | cut -c3- | uniq -c | \
	sed 's/\s\+/ /g' | while read line; do
		ma_info "$line"
	done

#----------------------------------------------------------[ Network Section ]--

ma_midtitle "Network"

tblformat="%-25s %13s %13s"

ma_info "$(printf "$tblformat" Interface Sent/MiB Received/MiB)" "Address"

for i in /sys/class/net/*; do
	in="$(basename "$i")"
	if echo "$in" | grep -qE '^((vir)?br[0-9]|br-[0-9a-f]{12}|vnet[0-9]|veth[0-9a-f]{7}|docker0|lo$)'; then
		continue
	fi
	read -r ir < "$i/statistics/rx_bytes"
	read -r is < "$i/statistics/tx_bytes"
	ir=$((ir / 1024 / 1024))
	is=$((is / 1024 / 1024))
	ip="$(ip -f inet addr show $in | head -n 2 | tail -n 1 | cut -c 10- | \
								cut -d" " -f 1)"
	ma_info "$(printf "$tblformat" "$in" "$is" "$ir")" "$ip"
done

#-------------------------------------------------------------[ File Systems ]--

ma_midtitle "File systems"
ma_info "$(printf "$tblformat" Mountpoint "Used/GiB" "Of/GiB")" "Percentage"
# Determine all device filesystems
# Remember: Filesystem Type 1024-blocks Used Available Capacity Mounted on
df -k -P -T | while read -r line; do
	# echo $line explaination
	# 	No quotes! Removes additional spaces that would otherwise
	#	conflict with cut's processing
	splitlin="$(echo $line)"
	mountpoint="${splitlin%% *}"
	splitlin="${splitlin#* }"
	ftstype="${splitlin%% *}"
	mountpoint1="$(printf "%s" "$mountpoint" | cut -c-5)"
	mountpoint2="$(printf "%s" "$mountpoint" | cut -c-9)"
	if [ "$fstype" = "zfs" ] || { [ "$mountpoint1" = "/dev/" ] && \
				! [ "$mountpoint2" = "/dev/loop" ]; }; then
		splitlin="${splitlin#* }"
		# f3
		of=$((${splitlin%% *} / 1024 / 1024))
		splitlin="${splitlin#* }"
		# f4
		used=$((${splitlin%% *} / 1024 / 1024))
		splitlin="${splitlin#* }"
		# f5
		splitlin="${splitlin#* }"
		# f6
		percentage="${splitlin%% *}"
		splitlin="${splitlin#* }"
		# f7
		dir="${splitlin%% *}"
		# Double quote because of printf processing
		storhl=
		[ "$(printf "%s" "$percentage" | cut -d % -f 1)" -le 90 ] || \
								storhl="$d_chl"
		first_str="$(printf "$tblformat" $dir $used $of)"
		if [ "$(printf "%s" "$first_str" | wc -c)" -gt 72 ]; then
			first_str="$dir ($used/$of)"
		fi
		ma_info "$first_str" "$percentage" "" "$storhl"
	fi
done

if [ -x /usr/bin/quota ]; then
	quota="$(quota -w | head -n 3 | tail -n 1)"
	if [ -n "$quota" ]; then
		qused="$(echo $quota | cut -d" " -f 2)"
		qmax="$(echo $quota | cut -d" " -f 3)"
		ma_info "$(printf "$tblformat" Quota "$(awk \
			"BEGIN { printf \"%0.2f\", $qused/1024/1024 }")" \
			"$(awk "BEGIN { printf \"%0.2f\", $qmax/1024/1024 }")" \
						)" "$(($qused * 100 / $qmax))%"
	fi
fi

#--------------------------------------------------------------------[ Users ]--

ma_midtitle "Users"

tblformat2="%-12s %7s %18s %8s %16s"
ma_info "$(printf "$tblformat2" Username MEM/MiB Top/MEM CPU Top/CPU)" Time/min

remlines="$(($LINES - 21))"
if [ "$remlines" -lt 2 ]; then
	remlines=2
fi

# requires gawk:
ps -A -o user:12,pcpu,rss,time,comm | awk '
function toseconds(x) {
	split(x, parts, ":")
	return (parts[1] * 60 + parts[2]) * 60 + parts[3]
}

BEGIN {
	# data[user]
	#	s(rss), s(cpu), s(time),
	#	max(cpu):name, max(cpu):perc, max(mem):name, max(mem):rss
}

/^.*$/ {
	if($1 != "USER") {
		pcpu = $2
		rss  = $3
		time = toseconds($4)
		name = $5

		data[$1][0] += rss
		data[$1][1] += pcpu
		data[$1][2] += time

		# >= because we want to display a 0% process if max = 0

		if(pcpu >= data[$1][4]) {
			data[$1][3] = name
			data[$1][4] = pcpu
		}

		if(rss >= data[$1][6]) {
			data[$1][5] = name
			data[$1][6] = rss
		}
	}
}

# Output: s(rss), s(cpu), s(time),
#         max(cpu):name, max(cpu):perc, max(mem):name, max(mem):rss,
#         username

END {
	j = 0
	for(key in data) {
		printf "%012d,", data[key][0]
		for(i = 1; i < 7; i++)
			printf "%s,", data[key][i]
		printf "%s\n", key
		j++
		if(j >= '$remlines') {
			break
		}
	}
}' | sort -r | sed 's/^0\+//g' | while read -r line; do
	rss="${line%%,*}"
	line="${line#*,}"
	cpu="${line%%,*}"
	line="${line#*,}"
	time="${line%%,*}"
	line="${line#*,}"
	cpu_top_name="${line%%,*}"
	line="${line#*,}"
	cpu_top_perc="${line%%,*}"
	line="${line#*,}"
	mem_top_name="${line%%,*}"
	line="${line#*,}"
	mem_top_perc="${line%%,*}"
	username="${line#*,}"

	ma_info "$(printf "$tblformat2" "$username" "$(($rss / 1024))" \
		"$(echo $mem_top_name | head -c 17)" "$cpu%" \
		"$(echo $cpu_top_name | head -c 15)")" "$(($time / 60))"
done

#------------------------------------------------------------[ Bottom border ]--

printf "$d_borders$d_ebotl"
i=2
while [ $i -lt $cols ]; do
	printf "$d_flin"
	i=$(($i + 1))
done
printf "$d_ebotr$d_r\n\n"
